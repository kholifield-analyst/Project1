import streamlit as st
import snowflake.connector
import pandas as pd

# --- Snowflake Connection Setup ---
def get_snowflake_connection():
    try:
        conn = snowflake.connector.connect(
            user=st.secrets["snowflake"]["user"],
            password=st.secrets["snowflake"]["password"],
            account=st.secrets["snowflake"]["account"],
            warehouse=st.secrets["snowflake"]["warehouse"],
            database=st.secrets["snowflake"]["database"],
            schema=st.secrets["snowflake"]["schema"]
        )
        return conn
    except Exception as e:
        st.error(f"Error connecting to Snowflake: {e}")
        return None

# --- Fetch Data from Snowflake ---
def fetch_data(query):
    conn = get_snowflake_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(query)
            data = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]
            cursor.close()
            conn.close()
            return pd.DataFrame(data, columns=columns)
        except Exception as e:
            st.error(f"Error fetching data: {e}")
    return pd.DataFrame()

# --- Get User Role ---
def get_user_role():
    df = fetch_data("SELECT CURRENT_ROLE()")
    return df.iloc[0, 0] if not df.empty else None

# --- Get Snowflake User ---
def get_snowflake_user():
    df = fetch_data("SELECT CURRENT_USER()")
    return df.iloc[0, 0] if not df.empty else None

# --- Main UI ---
st.title("Smith-Wilson UFR Calculation")

df = fetch_data("""
    SELECT * FROM ACT_PROD_DISCOUNTRATE_DB.WORKSPACE.DR_USER_INPUT
    WHERE CURRENT_RECORD_INDICATOR='Y' AND PARAM_NAME NOT IN ('BUSINESS_DATE','SMOOTH')
""")
st.dataframe(df)

role = get_user_role()
user = get_snowflake_user()

if role == 'ACCOUNTADMIN':
    df_approve = fetch_data("SELECT * FROM ACT_DEV_DISCOUNTRATE_DB.WORKSPACE.DR_USER_INPUT_APPROVE")
    st.dataframe(df_approve)

    if st.button('Approve'):
        conn = get_snowflake_connection()
        if conn:
            cursor = conn.cursor()
            for _, row in df_approve.iterrows():
                try:
                    cursor.execute(f"""
                        UPDATE ACT_DEV_DISCOUNTRATE_DB.WORKSPACE.DR_USER_INPUT
                        SET PARAM_VALUE = '{row['PARAM_VALUE']}', STATUS = 'Approved'
                        WHERE PARAM_NAME = '{row['PARAM_NAME']}'
                    """)
                    cursor.execute(f"""
                        INSERT INTO ACT_DEV_DISCOUNTRATE_DB.WORKSPACE.DR_HISTORY 
                        (PARAM_NAME, OLD_VALUE, NEW_VALUE, EDITED_BY, EDITED_TIMESTAMP, APPROVED_BY, APPROVED_TIMESTAMP)
                        VALUES ('{row['PARAM_NAME']}', '{row['OLD_VALUE']}', '{row['PARAM_VALUE']}', '{row['EDITED_BY']}', '{row['EDITED_TIMESTAMP']}', '{user}', CURRENT_TIMESTAMP())
                    """)
                    cursor.execute(f"""
                        DELETE FROM ACT_DEV_DISCOUNTRATE_DB.WORKSPACE.DR_USER_INPUT_APPROVE
                        WHERE PARAM_NAME = '{row['PARAM_NAME']}'
                    """)
                except Exception as e:
                    st.error(f"Error during approval: {e}")
            conn.commit()
            cursor.close()
            conn.close()
            st.success("Changes approved!")

elif role == 'ACT_DEV_DISCOUNTRATE_DB_USER_ROLE':
    edited_data = {}
    for _, row in df.iterrows():
        edited_data[row['PARAM_NAME']] = st.text_input(f"Edit {row['PARAM_NAME']}", value=row['PARAM_VALUE'])

    if st.button('Save'):
        conn = get_snowflake_connection()
        if conn:
            cursor = conn.cursor()
            for param_name, new_value in edited_data.items():
                try:
                    old_value_df = fetch_data(f"SELECT PARAM_VALUE FROM ACT_DEV_DISCOUNTRATE_DB.WORKSPACE.DR_USER_INPUT WHERE PARAM_NAME = '{param_name}'")
                    old_value = old_value_df.iloc[0, 0] if not old_value_df.empty else None
                    cursor.execute(f"""
                        INSERT INTO ACT_DEV_DISCOUNTRATE_DB.WORKSPACE.DR_USER_INPUT_APPROVE
                        (PARAM_NAME, OLD_VALUE, PARAM_VALUE, EDITED_BY, EDITED_TIMESTAMP)
                        VALUES ('{param_name}', '{old_value}', '{new_value}', '{user}', CURRENT_TIMESTAMP())
                    """)
                except Exception as e:
                    st.error(f"Error saving data: {e}")
            conn.commit()
            cursor.close()
            conn.close()
            st.success("Changes submitted for approval!")
